// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Chain {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  chainId        Int
  name           String
  symbol         String
  rpcUrl         String
  tokens         Token[]
  blockTime      Int
  factoryAddress String
  routerAddress  String
  WETHAddress    String
  pairs          Pair[]
  DefuturePair   DefuturePair[]

  @@unique([chainId])
}

model Token {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  chainId  Int
  address  String
  name     String
  symbol   String
  decimals Int    @default(18)
  pair0    Pair[] @relation("pair_token_0")
  pair1    Pair[] @relation("pair_token_1")
  swapFrom Swap[] @relation("swap_from")
  swapTo   Swap[] @relation("swap_to")

  chain         Chain          @relation(fields: [chainId], references: [chainId])
  DefuturePair0 DefuturePair[] @relation("defuture_pair_token_0")
  DefuturePair1 DefuturePair[] @relation("defuture_pair_token_1")

  @@unique([chainId, address])
}

model Pair {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  address String

  token0Id String @db.ObjectId
  token1Id String @db.ObjectId

  token0 Token @relation("pair_token_0", fields: [token0Id], references: [id])
  token1 Token @relation("pair_token_1", fields: [token1Id], references: [id])

  swapEvents Swap[]

  chainId Int
  chain   Chain @relation(fields: [chainId], references: [chainId])

  Liquidity Liquidity[]

  @@unique([address, chainId])
}

model DefuturePair {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  address String

  token0Id String @db.ObjectId
  token1Id String @db.ObjectId

  token0 Token @relation("defuture_pair_token_0", fields: [token0Id], references: [id])
  token1 Token @relation("defuture_pair_token_1", fields: [token1Id], references: [id])

  chainId Int
  chain   Chain @relation(fields: [chainId], references: [chainId])

  positions Position[]

  @@unique([address])
}

model Position {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime
  updatedAt DateTime
  deletedAt DateTime?

  owner        String
  positionId   String // tokenId of NFT
  positionType String // 0: Long, 1: Short

  margin String // margin amount
  strike String // with 10x -> buy 100y :: x
  future String // with 10x -> buy 100y :: y

  defuturePair        DefuturePair @relation(fields: [defuturePairAddress], references: [address])
  defuturePairAddress String
  AddMargin           AddMargin[]

  @@unique([positionId, defuturePairAddress])
  @@index([owner])
}

model Swap {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime
  sender      String
  receiver    String
  txHash      String
  blockNumber Int
  fromTokenId String   @db.ObjectId
  toTokenId   String   @db.ObjectId
  fromToken   Token    @relation("swap_from", fields: [fromTokenId], references: [id])
  toToken     Token    @relation("swap_to", fields: [toTokenId], references: [id])
  fromAmount  String
  toAmount    String
  pairId      String   @db.ObjectId
  pair        Pair     @relation(fields: [pairId], references: [id])

  @@unique([txHash])
  @@index([sender, receiver, blockNumber])
}

model Liquidity {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime
  txHash      String
  blockNumber Int
  event       LiquidityEvent
  sender      String // EOA of liquidity transaction
  receiver    String // receiver of liquidity transaction
  pairId      String         @db.ObjectId
  pair        Pair           @relation(fields: [pairId], references: [id])
  amountLp    String // amount of lp tokens minted/burned
  amount0     String // amount of token0
  amount1     String // amount of token1

  @@unique([txHash])
  @@index([sender, receiver, blockNumber])
}

enum LiquidityEvent {
  MINT // add liquidity and mint lp token
  BURN // withdraw liquidity and burn lp token
}

model AddMargin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime
  txHash      String
  blockNumber Int

  from          String
  positionId    String   @db.ObjectId
  amount        String
  currentMargin String
  position      Position @relation(fields: [positionId], references: [id])

  @@unique([txHash])
}
